datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id       String  @id @default(uuid())
  email    String? @unique
  role     String? // "TEACHER" or "STUDENT"
  name     String
  lastName String?

  // Teacher-User to Subjects relationship
  subjects          Subject[]         @relation("TeacherSubjects")
  studentsInSubject Subject[]         @relation("StudentSubjects")
  Subject           Subject[]
  SubjectStudents   SubjectStudents[]
  Grades            Grade[]
}

model Subject {
  id                 String  @id @default(uuid())
  teacher            User    @relation(fields: [teacherId], references: [id])
  teacherId          String
  archived           Boolean @default(false)
  subjectName        String
  order              Int?
  subjectDescription String? // Add this line
  students           User[]  @relation("StudentSubjects")

  // Many-to-Many relationship with students through SubjectStudents table
  studentsInSubject User[]            @relation("TeacherSubjects")
  subjectStudents   SubjectStudents[]
  assignments       Assignment[]
}

model SubjectStudents {
  id        String  @id @default(uuid())
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?
}

model Assignment {
  id          String    @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  dueDate     DateTime?
  subject     Subject   @relation(fields: [subjectId], references: [id])
  subjectId   String
  grades      Grade[]
}

model Grade {
  id           String     @id @default(uuid())
  grade        Int
  date         String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  assignment   Assignment @relation(fields: [assignmentId], references: [id]) // Add this line
  assignmentId String
}
